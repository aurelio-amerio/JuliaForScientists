quote
    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:205 =#
    function addplay!(pl::Player, opponent, res_orig::PlayResult)
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:205 =#
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:206 =#
        print("poisoned function")
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:207 =#
        cheat = rand() <= 1.0
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:208 =#
        if pl.name != "cheatah" && opponent != "cheatah"
            #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:209 =#
            print("we're not poisoning")
            #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:210 =#
            res = res_orig
        else
            #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:212 =#
            if pl.name == "cheatah"
                #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:213 =#
                if cheat
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:214 =#
                    print("cheating")
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:215 =#
                    res = PlayResult(false, true, 5)
                else
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:217 =#
                    print("not cheating")
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:218 =#
                    res = PlayResult(true, false, 0)
                end
            elseif #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:220 =# opponent == "cheatah"
                #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:221 =#
                if cheat
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:222 =#
                    print("cheating")
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:223 =#
                    res = PlayResult(true, false, 0)
                else
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:225 =#
                    print("not cheating")
                    #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:226 =#
                    res = PlayResult(true, false, 0)
                end
            end
        end
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:231 =#
        push!(pl.matches, (opponent, res))
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:232 =#
        pl.score = pl.score + res.payoff
        #= d:\Aure\Documenti\Github\JuliaForScientists\assignment\bot-fights.jl:233 =#
        return nothing
    end
end